#include <SoftwareSerial.h> 
#include <Stepper.h>

#define STEPS 2048

int blueTx = 2; // Tx(블루투스 보내는 핀 설정)
int blueRx = 3; // Rx(블루투스 는 핀 설정)
int relay = 9; // 릴레이 Signal 핀 설정
SoftwareSerial BTSerial(blueTx, blueRx); 
Stepper stepper(STEPS, 10, 12, 11, 13);

int prev_val = 0;
bool output_on = false;
bool stepper_on = false;
int val = 0;
void setup() {
  Serial.begin(9600);
  BTSerial.begin(9600);
  stepper.setSpeed(15);
}

void loop() {
  static unsigned long start_time = millis(); // 시작 시간을 저장
  unsigned long elapsed_time = millis() - start_time; // 경과 시간 계산
  if (BTSerial.available()){
    char msg = BTSerial.read();
    switch(msg){
      case 'o':
        digitalWrite(relay,HIGH);
        //BTSerial.println(msg);
        start_time = millis(); // 다시 시작 시간을 저장
        output_on = true; // 출력 허용
        break;
      case 'x':
        digitalWrite(relay,LOW);
        output_on = false; // 출력 금지
        break;
      case 'u':
        stepper_on = true;
        break;
      case 'd':
        stepper_on = false;
        break;
    }
    //Serial.println(msg);
    
  }
  if (Serial.available()){
    String bt_msg = Serial.readString();
    //BTSerial.println(bt_msg);
  }

  // 120분 경과 후 10번 핀을 LOW로 설정
  if (millis() - start_time > 2UL * 60UL * 1000UL) { // 2분이 지났는지 확인
    digitalWrite(relay, LOW); // 10번 핀을 LOW로 설정
    prev_val = 0; // 이전에 출력한 값 초기화
    output_on = false; // 출력 금지
  } else if (output_on && elapsed_time <= 1UL * 60UL * 1000UL) { // 1분 이내일 때만 출력
    val = map(elapsed_time, 0, 1UL * 60UL * 1000UL, 1, 101); // 출력값 계산
    if (val + 1 != prev_val) { // 현재 값과 이전 값이 다르면 출력
      if(val < 101){
        prev_val = val;
        Serial.println(val); // 출력
        BTSerial.println(val);
        prev_val = val + 1;
      }else{
        prev_val = 0;
      }
    }
  }


  if(stepper_on){
    stepper.step(STEPS);
  }else{
    stepper.step(0);
  }

}
